generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String
  createdAt    DateTime      @default(now())
  applications Application[]
}

model Application {
  id                     Int         @id @default(autoincrement())
  propertyId             String
  address                String
  bedrooms               String
  moveInDate             DateTime
  fee                    Float
  transactionMethod      String
  fullName               String
  birthday               DateTime
  ssn                    String
  phone                  String
  licenseId              String
  state                  String
  email                  String
  currentAddress         String
  dateOfMoveIn           DateTime
  rentAmount             Float
  reasonForMoving        String
  landlordName           String
  landlordPhone          String
  employer               String
  jobTitle               String
  employerAddress        String
  contactPhone           String
  supervisorName         String
  startDate              DateTime
  income                 Float
  assistanceReceived     Boolean
  assistanceAmount       Float?
  additionalIncome       Boolean
  additionalIncomeAmount Float?
  eviction               Boolean
  refusedRent            Boolean
  refusedRentExplanation String?
  felony                 Boolean
  felonyExplanation      String?
  emergencyName          String
  emergencyPhone         String
  emergencyRelationship  String
  paymentStatus          String      @default("pending")
  stripePaymentId        String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  userId                 Int
  user                   User        @relation(fields: [userId], references: [id])
  documents              Document[]  @relation("ApplicationDocuments")
  others                 Other[]
  references             Reference[]
}

model Other {
  id            Int         @id @default(autoincrement())
  name          String
  birthday      DateTime
  ssnLast4      String
  relationship  String
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id])
}

model Reference {
  id            Int         @id @default(autoincrement())
  name          String
  phone         String
  relationship  String
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id])
}

model Document {
  id            Int         @id @default(autoincrement())
  name          String
  url           String
  applicationId Int
  application   Application @relation("ApplicationDocuments", fields: [applicationId], references: [id])
}

model Mail {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Service {
  id              Int       @id @default(autoincrement())
  name            String
  email           String
  phone           String
  hearAbout       String?
  type            String?
  address         String?
  occupancyStatus String?
  numberUnits     Int?
  unitMix         String?
  grossIncome     Float?
  desiredServices String?
  startDate       DateTime?
  additionalInfo  String?
  createdAt       DateTime  @default(now())
}

model Evaluation {
  id               Int      @id @default(autoincrement())
  fullName         String
  email            String
  phone            String
  address          String
  evaluationStatus String   @default("pending")
  createdAt        DateTime @default(now())
}
